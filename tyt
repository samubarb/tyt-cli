#!/usr/bin/env python3
# Take Your Token CLI

import os
import sys
from pathlib import Path
import json
from enum import Enum
import getpass
import requests
import urllib, http.cookiejar
import re

filename = 'user.json'
foldername = 'tyt-cli'
home = Path.home()
userfile = os.path.join(str(home), foldername, filename)
domain='https://takeyourtoken.necst.it'
login_url = urllib.parse.urljoin(domain, 'login')
buy_url = urllib.parse.urljoin(domain, 'buy_product')
add_url = urllib.parse.urljoin(domain, 'add_token')
dash_url = urllib.parse.urljoin(domain, 'user_dash')
encoding = 'utf-8'

class Credentials():
    def __init__(self, username=None, password=None):
        self.username = username
        self.password = password
        self.opener = None

    def toDict(self):
        return {'username':self.username, 'password':self.password}

    def username(self):
        return self.username

    def password(self):
        return self.password

    def store(self, path):
        with open(path, 'w+') as write_file:
            json.dump(self.toDict(), write_file)

    def load(self, path):
        try:
            read_file = open(path, 'r')
            credentials = json.load(read_file)
            self.username = credentials.get('username')
            self.password = credentials.get('password')
            cj = http.cookiejar.CookieJar()
            opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cookiejar=cj))
            login_data = urllib.parse.urlencode({  \
                'email': self.username,   \
                'password': self.password \
                }).encode(encoding)
            opener.open(login_url, login_data)
            self.opener = opener
        except FileNotFoundError:
            print ('First usage. Run \'tyt config\' to configure your user and password.')

class Command(Enum):
    Config = 1
    Show = 2
    Buy = 3
    Add = 4
    Help = 5

class Product(Enum):
    Coffee = 'Caff√©'
    Beer = 'Carlsberg'
    Tea = 'The'
    RedBull = 'Red bull'


def switch1(arg):
    switcher = {
        'config': Command.Config,
        'show'  : Command.Show,
        'buy'   : Command.Buy,
        'add'   : Command.Add,
        'help'  : Command.Help
    }
    return switcher.get(arg, Command.Help)

def switch2(arg):
    switcher = {
        'coffee'    : Product.Coffee,
        'beer'      : Product.Beer,
        'tea'       : Product.Tea,
        'redbull'   : Product.RedBull
    }
    return switcher.get(arg, Command.Help)

def help():
    help_message = '''Options:
    help            This help menu.
    config          Prompt email and password dialog and save them to a local file.
    buy [item]      Buy something [coffee | beer | redbull | tea].
    add [number]    Add tokens to your wallet.
    token           Shows your left tokens.

    Welcome in Take Your Token CLI.
    A token costs 30 eurocents. Here are some examples of euro/token change.
                    
                    ------------------
                      Euro  | Tokens  
                    --------+---------
                      3.00  |   10   
                      4.50  |   15   
                      5.10  |   17   
                      6.00  |   20   
                     10.20  |   34   
                     20.40  |   68   
                     30.00  |   100  
                     99.00  |   330
    '''
    print(help_message)

def config():
    if sys.stdin.isatty():
       print ('Enter user')
       usr = input('Username: ')
       pwd = getpass.getpass('Password: ')
    else:
       usr = sys.stdin.readline().rstrip()
       pwd = sys.stdin.readline().rstrip()
    user.username = usr
    user.password = pwd
    user.store(userfile)
    print('Credentials stored in', userfile)


# def login():
#     cj = http.cookiejar.CookieJar()
#     opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cookiejar=cj))
#     login_data = urllib.parse.urlencode({  \
#         'email': user.username,  \
#         'password': user.password \
#         }).encode(encoding)
#     opener.open(login_url, login_data)
#     return opener

def show():
    resp = user.opener.open(dash_url)
    resp = str(resp.read())
    res = re.search('You have(.*)left!', resp)
    print(res.group())

def buy():
    pass

def add():
    pass

def execute(cmd):
    if cmd == Command.Help:
        help()
    elif cmd == Command.Config:
        config()
    elif cmd == Command.Show:
        show()




if len(sys.argv) == 1:
    help()
    quit()
else:
    user = Credentials()
    user.load(userfile)

    cmd = switch1(sys.argv[1])
    execute(cmd)
    quit()



# # Declare constant strings
# domain=https://takeyourtoken.necst.it
# match="302 FOUND"



# # Function to buy an item between coffee, beer, redbull or tea
# function buy {
#     case "$1" in
#         c|coffee)
#             item=$COFFEE
#             ;;
#         b|beer)
#             item=$BEER
#             ;;
#         r|redbull)
#             item=$REDBULL
#             ;;
#         t|tea)
#             item=$TEA
#             ;;
#         *) echo "Not a valid item." ; exit 1 ;;
#     esac

#     # Performin POST request to buy an intem using $cookie generated from login
#     res=$(curl -s -i --cookie "session=$cookie" -d "buy=$item" -X POST "$domain/buy_product")
#     grep -i "token left" <<< $res | cut -d"!" -f1 | cut -d">" -f3
# }

# # Function to login and save the session $cookie
# function login {
#     # Login here and take POST header
#     res=$(curl -s -i -d "email=$email&password=$password" -X POST "$domain/login")

#     if echo "$res" | grep -q "$match"; then
#         # Isolate cookie 
#         # cookie=$(grep -i set-cookie <<< "$res" | cut -d"=" -f2 | cut -d";" -f1)
#         cookie=$(grep Set-Cookie <<< $res | cut -c21- | cut -c-163)

#     else
#       echo "Wrong username or password. Otherwise $domain is down."
#       exit 1
#     fi
# }

# # Input parsing
# case "$1" in
#     h|help|"") printf "Usage: %s [options]\n\n%s\n\n" "${0##*/}" "$options"; exit 1 ;;
    
#     c|config)
#         echo -n Email:
#         read email
#         echo -n Password: 
#         read -s password
#         echo email="$email" > $userfile
#         echo password="$password" >> $userfile
#         echo
#         exit 0
#         ;;
    
#     b|buy)
#         login
#         # Buy selected item
#         buy "$2"
#         ;;

#     a|add)
#         login
#         # Add tokens
#         res=$(curl -s -i --cookie "session=$cookie" -d "tokennumber=$2" -X POST "$domain/add_token")
#         grep -i "token left" <<< $res | cut -d"!" -f1 | cut -d">" -f3
#         ;;

#     t|token)
#         login
#         # Get user dashboard page to retrieve token number
#         res=$(curl -s -i --cookie "session=$cookie" -X GET "$domain/user_dash")
#         grep -i "token left" <<< $res | cut -d"!" -f1 | cut -d">" -f3
#         ;;

#     *) echo "Not a valid command." ; exit 1 ;;
# esac
