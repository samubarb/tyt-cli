#!/usr/bin/env python3
# Take Your Token CLI

import os
import sys
from pathlib import Path
import json
from enum import Enum
import getpass
import requests
import urllib, http.cookiejar
import re

filename = 'user.json'
foldername = 'tyt-cli'

len_args = len(sys.argv)
home = Path.home()
userfile = os.path.join(str(home), foldername, filename)
domain='https://takeyourtoken.necst.it'
login_url = urllib.parse.urljoin(domain, 'login')
buy_url = urllib.parse.urljoin(domain, 'buy_product')
add_url = urllib.parse.urljoin(domain, 'add_token')
dash_url = urllib.parse.urljoin(domain, 'user_dash')
encoding = 'utf-8'

class Credentials():
    def __init__(self, username=None, password=None):
        self.username = username
        self.password = password
        self.opener = None

    def toDict(self):
        return {'username':self.username, 'password':self.password}

    def username(self):
        return self.username

    def password(self):
        return self.password

    def store(self, path):
        with open(path, 'w+') as write_file:
            json.dump(self.toDict(), write_file)

    def load(self, path):
        try:
            read_file = open(path, 'r')
            credentials = json.load(read_file)
            self.username = credentials.get('username')
            self.password = credentials.get('password')
        except FileNotFoundError:
            quit('First usage. Run \'tyt config\' to configure your user and password.')

    def login(self):
        cj = http.cookiejar.CookieJar()
        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cookiejar=cj))
        login_data = urllib.parse.urlencode({  \
            'email': self.username,   \
            'password': self.password \
            }).encode(encoding)
        try:
            opener.open(login_url, login_data)
            self.opener = opener
        except urllib.request.HTTPError as err:
            quit('HTTP Error', err.code)

class Command(Enum):
    Config = 1
    Show = 2
    Buy = 3
    Add = 4
    Help = 5

class Product(Enum):
    Coffee = 'CaffÃ©'
    Beer = 'Carlsberg'
    Tea = 'The'
    RedBull = 'Red bull'
    Invalid = None


def switch1(arg):
    switcher = {
        'config': Command.Config,
        'show'  : Command.Show,
        'buy'   : Command.Buy,
        'add'   : Command.Add,
        'help'  : Command.Help
    }
    return switcher.get(arg, Command.Help)

def switch2(arg):
    switcher = {
        'coffee'    : Product.Coffee,
        'beer'      : Product.Beer,
        'tea'       : Product.Tea,
        'redbull'   : Product.RedBull
    }
    return switcher.get(arg, Product.Invalid)

def help():
    help_message = '''Options:
    help            This help menu.
    config          Prompt email and password dialog and save them to a local file.
    buy [item]      Buy something [coffee | beer | redbull | tea].
    add [number]    Add tokens to your wallet.
    token           Shows your left tokens.

    Welcome in Take Your Token CLI.
    A token costs 30 eurocents. Here are some examples of euro/token change.
                    
                    ------------------
                      Euro  | Tokens  
                    --------+---------
                      3.00  |   10   
                      4.50  |   15   
                      5.10  |   17   
                      6.00  |   20   
                     10.20  |   34   
                     20.40  |   68   
                     30.00  |   100  
                     99.00  |   330
    '''
    quit(help_message)

def config():
    if sys.stdin.isatty():
       print ('Enter user')
       usr = input('Username: ')
       pwd = getpass.getpass('Password: ')
    else:
       usr = sys.stdin.readline().rstrip()
       pwd = sys.stdin.readline().rstrip()
    user.username = usr
    user.password = pwd
    user.store(userfile)
    print('Credentials stored in', userfile)

def show():
    resp = user.opener.open(add_url) #add_url slightly faster than dash_url
    resp = str(resp.read())
    res = re.search('You have(.*)left!', resp)
    try:
        print(res.group())
    except:
        quit('Error: Check you credentials.')

def buy():
    if len_args > 2:
        prod = switch2(sys.argv[2])
        if prod == Product.Invalid:
            quit('The product is invalid.')
            
        else:
            data = urllib.parse.urlencode({'buy': prod.value}).encode(encoding)
            user.login()
            user.opener.open(buy_url, data)
            show()
    else:
        quit('Not enough arguments.')

def is_number(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

def add():
    if len_args > 2:
        token = sys.argv[2]
        if not is_number(token):
            quit('You have to provide an integer number of tokens.')
        else:
            data = urllib.parse.urlencode({'tokennumber': token}).encode(encoding)
            user.login()
            user.opener.open(add_url, data)
            show()
    else:
        quit('Not enough arguments.')

def execute(cmd):
    if cmd is Command.Help:
        help()
    elif cmd is Command.Config:
        config()
    else:
        user.load(userfile)
        if cmd is Command.Show:
            user.login()
            show()
        elif cmd is Command.Buy:
            buy()
        elif cmd is Command.Add:
            add()


# Start script
if len_args == 1:
    help()
elif len_args > 1:
    cmd = switch1(sys.argv[1])
    user = Credentials()
    # if cmd is not Command.Config:
        
    execute(cmd)
# End script
