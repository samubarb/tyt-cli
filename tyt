#!/usr/bin/env python3
# Take Your Token CLI

import getpass
import http.cookiejar
import json
import os
import re
import sys
import urllib
from enum import Enum
from decimal import Decimal

# Folder and files paths
filename = 'user.json'
foldername = os.path.dirname(os.path.realpath(__file__))
userfile = os.path.join(foldername, filename)

# Domain and URLs
domain = 'https://takeyourtoken.necst.it'
login_url = urllib.parse.urljoin(domain, 'login')
buy_url = urllib.parse.urljoin(domain, 'buy_product')
add_url = urllib.parse.urljoin(domain, 'add_token')
dash_url = urllib.parse.urljoin(domain, 'user_dash')

# HTTP POST requests encoding
encoding = 'utf-8'

# Number of input arguments 
len_args = len(sys.argv)


class Credentials():
    def __init__(self, username=None, password=None):
        self.username = username
        self.password = password
        self.opener = None

    def toDict(self):
        return {'username': self.username, 'password': self.password}

    def username(self):
        return self.username

    def password(self):
        return self.password

    def store(self, path):
        with open(path, 'w+') as write_file:
            json.dump(self.toDict(), write_file)

    def load(self, path):
        try:
            read_file = open(path, 'r')
            credentials = json.load(read_file)
            self.username = credentials.get('username')
            self.password = credentials.get('password')
        except FileNotFoundError:
            quit('First usage. Run \'tyt config\' to configure your user and password.')

    def login(self):
        cj = http.cookiejar.CookieJar()
        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cookiejar=cj))
        login_data = urllib.parse.urlencode({'email': self.username, 'password': self.password}).encode(encoding)
        try:
            opener.open(login_url, login_data)
            self.opener = opener
        except urllib.request.HTTPError as err:
            quit('HTTP Error')


class Command(Enum):
    Config = 1
    Show = 2
    Buy = 3
    Add = 4
    Help = 5
    Convert = 6
    Price = 7


class Product(Enum):
    Coffee = 'CaffÃ©'
    Beer = 'Carlsberg'
    Tea = 'The'
    RedBull = 'Red bull'
    Invalid = None


def switch1(arg):
    switcher = {
        'config': Command.Config,
        'show': Command.Show,
        'buy': Command.Buy,
        'add': Command.Add,
        'convert': Command.Convert,
        'price': Command.Price,
        'help': Command.Help
    }
    return switcher.get(arg, Command.Help)


def switch2(arg):
    switcher = {
        'coffee': Product.Coffee,
        'beer': Product.Beer,
        'tea': Product.Tea,
        'redbull': Product.RedBull
    }
    return switcher.get(arg, Product.Invalid)


def help():
    help_message = '''Options:
    help            This help menu.
    config          Prompt email and password dialog and save them to a local file.
    buy [item]      Buy something [coffee | beer | redbull | tea].
    add [number]    Add tokens to your wallet.
    show            Shows your left tokens.
    convert [euros] Euro->Tokens converter.
    price           Shows prices list.        

    Welcome in Take Your Token CLI.
    A token costs 30 eurocents. Here are some examples of euro/token change.
                    
                    ------------------
                      Euro  | Tokens  
                    --------+---------
                      3.00  |   10   
                      4.50  |   15   
                      5.10  |   17   
                      6.00  |   20   
                     10.20  |   34   
                     20.40  |   68   
                     30.00  |   100  
                     99.00  |   330
    '''
    quit(help_message)


def config():
    if sys.stdin.isatty():
        print('Enter user')
        usr = input('Username: ')
        pwd = getpass.getpass('Password: ')
    else:
        usr = sys.stdin.readline().rstrip()
        pwd = sys.stdin.readline().rstrip()
    user.username = usr
    user.password = pwd
    user.store(userfile)
    print('Credentials stored in', userfile)


def show():
    resp = user.opener.open(add_url)  # add_url slightly faster than dash_url
    resp = str(resp.read())
    res = re.search('You have(.*)left!', resp)
    try:
        print(res.group())
    except:
        quit('Error: Check you credentials.')


def buy():
    if len_args > 2:
        prod = switch2(sys.argv[2])
        if prod == Product.Invalid:
            quit('The product is invalid.')
        else:
            data = urllib.parse.urlencode({'buy': prod.value}).encode(encoding)
            user.login()
            user.opener.open(buy_url, data)
            show()
    else:
        quit('Not enough arguments.')


def is_int(s):
    try:
        int(s)
        return True
    except ValueError:
        return False


def is_positive_float(s):
    try:
        num = float(s)
        if num >= 0.0:
            return True
        else:
            return False
    except ValueError:
        return False


def add():
    if len_args > 2:
        token = sys.argv[2]
        if not is_int(token):
            quit('You have to provide an integer number of tokens.')
        else:
            data = urllib.parse.urlencode({'tokennumber': token}).encode(encoding)
            user.login()
            user.opener.open(add_url, data)
            show()
    else:
        quit('Not enough arguments.')


def convert():
    if len_args > 2:
        euro = sys.argv[2]
        if not is_positive_float(euro):
            quit('You have to provide a positive float number of euros.')
        else:
            token_value = Decimal('0.30')
            euro = Decimal(euro)
            div = euro//token_value
            mod = euro % token_value
            if mod == 0:
                print('{0:.2f}'.format(euro) + ' euros equal to ' + '{0:.0f}'.format(div) + ' tokens.')
            else:
                lower = token_value * div
                upper = token_value * (div + 1)
                if lower != 0.0:
                    print('{0:.2f}'.format(lower) + ' euros -> ' + '{0:.0f}'.format(div) + ' tokens, OR')
                print('{0:.2f}'.format(upper) + ' euros -> ' + '{0:.0f}'.format(div + 1) + ' tokens.')
    else:
        quit('Not enough arguments.')

def price():
    price_list = '''
                -------------------
                   Item  | Tokens  
                ---------+---------
                  coffee |   2   
                    beer |   2   
                 redbull |   2   
                     tea |   1   
    '''
    quit(price_list)


def execute(cmd):
    if cmd is Command.Help:
        help()
    elif cmd is Command.Config:
        config()
    else:
        user.load(userfile)
        if cmd is Command.Show:
            user.login()
            show()
        elif cmd is Command.Buy:
            buy()
        elif cmd is Command.Add:
            add()
        elif cmd is Command.Convert:
            convert()
        elif cmd is Command.Price:
            price()


# Start script
if len_args == 1:
    help()
elif len_args > 1:
    cmd = switch1(sys.argv[1])
    user = Credentials()
    execute(cmd)
# End script
